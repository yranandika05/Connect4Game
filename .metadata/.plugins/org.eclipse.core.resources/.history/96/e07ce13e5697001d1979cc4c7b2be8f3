 package game.model;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

import game.view.Game4GewinnView;

public class ClientServerThread extends Thread{
	
	private ServerSocket serversocket;
	private Socket socket;
	private Game4GewinnView view;
	private ObjectOutputStream oos;
	
	private ClientServerThread(Game4GewinnView v) {
		this.view = v;
	}
	
	public static ClientServerThread newServer(int port, Game4GewinnView view) {
		var cst = new ClientServerThread(view);
		try {
			cst.serversocket = new ServerSocket(port);
		} catch (IOException e){
			e.printStackTrace();
		}
		return cst;
	}
	
	public static ClientServerThread newClient(String ip, int port, Game4GewinnView view) {
		var cst = new ClientServerThread(view);
		try {
			cst.socket = new Socket(ip, port);
			cst.oos = new ObjectOutputStream(cst.socket.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
		return cst;
	}
	
	public boolean isConnected() {
		return (socket != null && socket.isConnected());
	}
	
	public void streamMove(int n) {
		try {
			if(oos != null) {
				oos.writeObject(n);
			}
		}catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void run() {
		try {
			// If this is a server accept one client
			if(socket == null) {
				socket = serversocket.accept();
				oos = new ObjectOutputStream(socket.getOutputStream());
				try {
					sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
			//Read objects
			var ois = new ObjectInputStream(socket.getInputStream());
			while (true) {
				Object obj = ois.readObject();
				view.receiveMove((int) obj);
				
			}
		} catch (IOException e) {
				throw new RuntimeException(e);
		} catch (ClassNotFoundException e) {
				throw new RuntimeException(e);
		}
	}

}
