package game.model;


/**
 * The game implementation of 4 Gewinn or Connect 4. This class is the model of the game.
 * It can be either used in combination with view and controller or directly through Jshell.
 * @author Yohanes Kirana
 *
 */
public class Game4GewinnModel {
	int width, height;
	int insert;
	int player = 1;
	int[] board = new int[42];
	
	/*	BOARD VIEW
	 	
	 	 0   1   2   3   4   5   6
	 	 7   8   9  10  11  12  13
	 	14  15  16  17  18  19  20
	 	21  22  23  24  25  26  27
	 	28  29  30  31  32  33  34
	 	35  36  37  38  39  40  41
	 
	 */
	
	/**
	 * Creates a new game instance with the given game field size.
	 * @param width width of the game field
	 * @param height height of the game field
	 */
	public Game4GewinnModel(int width, int height) {
		this.width = width;
		this.height = height;
	}
	
	/**
	 * Save the move that is inserted by player into the game board.
	 * If the selected column is full, player will be asked to choose another column. 
	 * @param n Column which player choose.
	 */
	private void insertMove(int n) {
		int pointer;
		int turn = getPlayerTurn();
		if(!isFull(n)) {
			for(int i = 5; i >= 0; i --) {
				pointer = n + i*7;
				if(board[pointer] == 0){
					board[pointer] = turn;
					break;
				}			
			}
			changeTurn();
		}else {
			System.out.println("The column you inserted is full. Please insert another column!");
		}
		printBoard();
	}
	
	/**
	 * A setter for insert move that can be called outside class.
	 * @param n Column which player choose.
	 */
	public void setMove(int n) {
		insertMove(n);
	}
	
	/**
	 * Print the current condition of the board game.
	 */
	private void printBoard() {
		for(int i = 0; i < board.length; i++) {
			if(i % 7 == 0) {
				System.out.print("\n");	
			}
			System.out.print(board[i]);
		}
		System.out.println("\nnow is player " + player + " turn");
		System.out.println(isGameOver());
	}
	
	/**
	 * Get the contents of the slot on the board. 
	 * @param n Selected slot.
	 * @return Content of the selected slot.
	 */
	public int viewSlot(int n) {
		return board[n];
	}
	
	/**
	 * Get the contents of the entire board.
	 * @return Contents of the entire board.
	 */
	public int[] viewBoard() {
		return board;
	}
	
	/**
	 * Change the current player's turn.
	 */
	private void changeTurn() {
		if(player == 1) {
			player = 2;
		}else {
			player = 1;
		}
	}
	
	/**
	 * Set the player's turn.
	 * @param n Player#s turn.
	 */
	public void setPlayerTurn(int n) {
		player = n;
	}
	
	/**
	 * Get the current turn.
	 * @return Current turn.
	 */
	public int getPlayerTurn() {
		return player;
	}
	
	/**
	 * Check if there is a winner.
	 * A winner is determined, if he has 4 balls in a row horizontally, vertically, or diagonally.
	 * @return True if a winner is determined, false otherwise.
	 */
	private boolean isWinner() {
		
		//check horizontal:
		for(int i = 0; i < 6; i ++) {
			for(int j = 0; j < 4; j ++){
				if(board[(i*7) + j] == player && board[(i*7) + j + 1] == player && board[(i*7) + j + 2] == player && board[(i*7) + j + 3] == player) {
					return true;
				}
			}
		}
		
		//check vertical:
		 for(int i = 0; i < 7; i ++) {
			 for(int j = 0; j < 3; j ++) {
				 if(board[i + (j*7)] == player && board[i + (j*7) + 7] == player && board[i + (j*7) + 14] == player && board[i + (j*7) + 21] == player) {
					 return true;
				 }
			 }
		 }
		 
		 //check diagonal:
		 for(int i = 0; i < 4; i ++) {
			 for(int j = 0; j < 3; j ++) {
				 if(board[i + (j*7)] == player && board[(i + 1) + ((j+1)*7)] == player && board[(i + 2) + ((j+2)*7)] == player &&board[(i + 3) + ((j+3)*7)] == player) {
					 return true;
				 }
			 }
		 }
		 for(int i = 6; i > 2 ; i --) {
			 for(int j = 0; j < 3; j ++) {
				 if(board[i + (j*7)] == player && board[(i - 1) + ((j + 1)*7)] == player && board[(i - 2) + ((j + 2)*7)] == player &&board[(i - 3) + ((j + 3)*7)] == player ) {
					 return true;
				 }
			 }
		 }
		 return false;
	}
	
	/**
	 * Check if the game end without any winner.
	 * @return True if there is no winner, false if the game has not end yet.
	 */
	private boolean isTie() {
		for(int i = 0; i < board.length; i++) {
			if(board[i] == 0) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * Check if the game is over.
	 * @return Player if one of the player win, 0 if the game end without any winner, -1 if the game is not over.
	 */
	public int isGameOver() {
		if(isWinner()) {
			return getPlayerTurn();
		}
		if(isTie()) {
			return 0;
		}
		return -1;
	}
	
	
	/**
	 * Check if the column is Full. the player will be asked to insert another column if it does.
	 * @param n Column that will be inserted.
	 * @return True if the column is full, false if the column is not full.
	 */
	public boolean isFull(int n) {
		if(n > 6) {
			System.out.println("Please pick column 0 up to 6");
		}else {
			if(board[n] != 0) {
				return true;
			}
		}
		return false;
	}
	
	
}
