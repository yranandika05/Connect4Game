package game.view;

import game.controller.Game4GewinnController;

import game.controller.IGame4GewinnController;
import game.controller.IGame4GewinnView;
import game.model.ClientServerThread;

import processing.core.PApplet;
import processing.core.PFont;
import processing.core.PImage;
import controlP5.*;
import static controlP5.ControlP5Constants.ACTION_RELEASE;

/**
 * View class that contains all methods and variables that are shared by {@link MainServer} and {@link MainClient}.
 * Use these view classes to start the game as server or client.
 * @author Yohanes Kirana
 *
 */
public class Game4GewinnView extends PApplet implements IGame4GewinnView {
	private ClientServerThread thread;
	private IGame4GewinnController controller;
	private static String network;
	private static int turn;
	private int gameWin;
	private int[] board = new int[42];
	private static Game4GewinnView view;
	private int counter = 0;

	
	private ControlP5 cp5;
	private static Textfield ipField;
	private static Textfield portField; 
	private Button startButton;

	 
	private Object lock = new Object();
	 
	/**
	 * Creates a new Processing view with 800x800px.
	 */
	 public Game4GewinnView() {
		 setSize(800, 800);
	 }
	 
	 /**
	  * Register a display for server.
	  * This can not be changed later.
	  * @return View of the game for server.
	  */
	 public static Game4GewinnView newServer() {
		 view = new Game4GewinnView();
		 view.thread = ClientServerThread.startGame(view);
		 network = "Server";
		 turn = 1;
		 return view;
	 }
	 
	 /**
	  * Register a display for client.
	  * This can not be changed later.
	  * @return View of the game for client.
	  */
	 public static Game4GewinnView newClient() {
		 view = new Game4GewinnView();
		 view.thread = ClientServerThread.startGame(view);
		 network = "Client";
		 turn = 2;
		 return view;
	 }
	 
	 /**
	  * Set the window's size to 800x800px.
	  */
	 @Override
	 public void settings() {
		 setSize(800, 800);
	 }
	 
	 /**
	  * Initialize controller from game.controller.Controller.java. 
	  * Initialize all the text fields and button from library CP5.
	  * Change the window title according to view's role. 
	  */
	 @Override
	 public void setup() {
		this.controller = new Game4GewinnController(this, width, height);
		if(network.contentEquals("Server")) {			
			surface.setTitle("4Gewinn - Server");
		}else if(network.contentEquals("Client")) {
			surface.setTitle("4Gewinn - Client");

		}
		
		cp5 = new ControlP5(this);
		ipField = cp5.addTextfield("IP"); 
		portField = cp5.addTextfield("Port");
		startButton = cp5.addButton("Start");

		
		
		
	 }
	 
	 /**
	  * Display the view according to state in controller.
	  */
	 @Override
	 public void draw() {
		 controller.nextFrame();
	 }
	 
	 /**
	  * Display the title screen of the game depend on the role of the view. 
	  * The player should insert port number if he plays as server and if he plays as client, he should insert port number and ip address.
	  * Need to be considered, that both port number are identical.
	  * Player then need to click start button to start game and change game state to game.
	  */
	 public void drawStartGame() {
		 background(color(255, 225, 93));
		 PImage img;
		 img = loadImage("Aset/Image/Logo.png");
		 image(img, 115, 100);
		 
		 
		 if(network.contentEquals("Server")) {
			 portField.setLabel("Enter your Port");
			 portField.setPosition(300, 450);
			 portField.setSize(200, 40);
			 
			 ipField.hide();
			 
			 startButton.setPosition(300, 530);
			 startButton.setSize(200, 40);
			 
			 startButton.addListenerFor(ACTION_RELEASE, new CallbackListener() {
				 
				 @Override
				 public void controlEvent(CallbackEvent arg0) {
					 if(counter == 0) {						 
						 int port = Integer.parseUnsignedInt(portField.getText());
						 view.thread = ClientServerThread.newServer(port );
						 view.thread.start();
						 counter += 1;
					 }
					 
					 controller.startGame();
					 
					 portField.hide();
					 
					 ipField.hide();
					 
					 startButton.hide();
					
				 }
			 });
		 }
		 
		 if(network.contentEquals("Client")) {
			 portField.setLabel("Enter your Port");
			 portField.setPosition(300, 450);
			 portField.setSize(200, 40);
			 
			 ipField.setLabel("Enter your IP");
			 ipField.setPosition(300, 530);
			 ipField.setSize(200, 40);
			 
			 startButton.setPosition(300, 610);
			 startButton.setSize(200, 40);
			 
			 startButton.addListenerFor(ACTION_RELEASE, new CallbackListener() {
				 
				 @Override
				 public void controlEvent(CallbackEvent arg0) {
					 if(counter == 0) {						 
						 String ip = ipField.getText();
						 int port = Integer.parseUnsignedInt(portField.getText());
						 view.thread = ClientServerThread.newClient(ip, port);
						 view.thread.start();
						 counter += 1;
					 }
					 
					 controller.startGame();
					 
					 portField.hide();
					 
					 ipField.hide();
					
					 startButton.hide();
				 }
			 });
		 }
		 		 
		 
		 
		 
		 
		 
	 }
	 
	 /**
	  * Display view of game state.
	  */
	 public void drawGame() {
		 background(color(234, 253, 252));
		 controller.getBoard();
		 drawSlot();
		 drawText();
		 drawFooter();
		 mouseHover();
	 }
	 
	 /**
	  * Draw 42 slot that will be used as board of the game.
	  * The slot will be change color according to player input.
	  */
	 private void drawSlot() {
		 fill(color(39, 174, 96));
		 rect(150, 310 , 500, 435, 28);
		 
		 int x = 190;
		 int y = 350;
		 
		 for(int i = 0; i < board.length; i++) {
			  if(i%7 == 0 && i != 0) {
				 y += 70;
				 x = 190;
			 }
			 if(controller.checkBoard(i) == 0) {
				 fill(255);
				 ellipse(x, y, 50, 50);	
				 x += 70;
			 }
			 if(controller.checkBoard(i) == 1) {
				 fill(color(252, 211, 3));
				 ellipse(x, y, 50, 50);	
				 x += 70;
			 }
			 if(controller.checkBoard(i) == 2) {
				 fill(color(10, 79, 240));
				 ellipse(x, y, 50, 50);	
				 x += 70;
			 }
			
		 }
	 }
	 
	 /**
	  * Draw a text to show player turn.
	  */
	 private void drawText() {
		 //Draw Turn Frame
		 fill(color(145, 216, 228));
		 rect(225, 100, 350, 75);
		 
		 //Text Turn
		 
		 if(controller.checkTurn() == turn) {
			 PFont gamePlay;
			 fill(color(76, 209, 55));
			 gamePlay = createFont("Aset/Font/Gameplay.ttf", 30);
			 textFont(gamePlay);
			 text("Now is your turn", 245, 145);
		 }else {
			 PFont gamePlay;
			 fill(color(231, 76, 60));
			 gamePlay = createFont("Aset/Font/Gameplay.ttf", 25);
			 textFont(gamePlay);
			 text("Now is enemy's Turn", 250, 145);
		 }
		 
		 
	 }
	 
	 /**
	  * Draw footer to display if the player play as server or client.
	  */
	 private void drawFooter() {
		 fill(0);
		 rect(0, 750, 800, 50);
		 
		//Text Player as server or client
		 fill(255);
		 textSize(11);
		 if(network.contentEquals("Server")) {
			text("You are playing as Server", 315, 768); 
		 }else {
			text("You are playing as Client", 315, 768);
		 }
		 
		 PFont simpletix;
		 fill(255);
		 simpletix = createFont("Aset/Font/simpletix.otf", 12);
		 textFont(simpletix);
		 text("yohanes.ranandika.kirana@mni.thm.de", 305, 786);
		
	 }
	 
	 public void mouseHover() {
		 for(int i = 0; i < 7; i ++) {			 
			 if(mouseX > (i*69)+165 && mouseX < (i*69)+215 && mouseY > 325 && mouseY < 725  ) {
				 fill(color(22, 217, 74));
				 triangle((i*69)+190, 300, (i*69)+165, 260, (i*69)+215, 260);
				 
			 }
		 }
	 }
	 
	 public void drawGameOver() {
		 background(0);
		 PFont gameria;
		 fill(color(46, 204, 113));
		 gameria = createFont("Aset/Font/GAMERIA.ttf", 128);
		 textFont(gameria);
		 if(gameWin == 0) {
			 text("Game end with no winner", 255, 145);
		 }else if(gameWin == 1) {
			 text("player 1 win", 15, 400);
		 }else if(gameWin == 2) {
			 text("player 2 win", 10, 400);
		 }
		
	 }
	 
	 @Override
	 public void mousePressed() {
		 if(controller.nextFrame().toString().contentEquals("Game")) {
			 if(turn == controller.checkTurn()) {
				 for(int i = 0; i < 7; i ++) {			 
					 if(mouseX > (i*69)+165 && mouseX < (i*69)+215 && mouseY > 325 && mouseY < 725  ) {
						 controller.insertMove(i);
						 sendMove(i);
					 }
				 }
			 }
		 }
	 }
	 
	 public void receiveMove(int n) {
		synchronized (lock) {
			controller.insertMove(n);
		}
	 }
	 
	 public void sendMove(int n) {
		thread.streamMove(n);
	 }
	 
	 public void setWinner(int n) {
		 this.gameWin = n;
	 }
	 
	 
	 
}
